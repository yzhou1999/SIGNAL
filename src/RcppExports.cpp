// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pred_k
IntegerVector pred_k(const Eigen::Map<Eigen::VectorXd>& x_mean_square_kK, const Eigen::MappedSparseMatrix<double>& query_data, const Eigen::Map<Eigen::MatrixXd>& x_mean_kK, const Eigen::Map<Eigen::VectorXd>& N_k);
RcppExport SEXP _SIGNAL_pred_k(SEXP x_mean_square_kKSEXP, SEXP query_dataSEXP, SEXP x_mean_kKSEXP, SEXP N_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x_mean_square_kK(x_mean_square_kKSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x_mean_kK(x_mean_kKSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type N_k(N_kSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_k(x_mean_square_kK, query_data, x_mean_kK, N_k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SIGNAL_pred_k", (DL_FUNC) &_SIGNAL_pred_k, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SIGNAL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
